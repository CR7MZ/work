///题目：https://www.nowcoder.com/questionTerminal/22243d016f6b47f2a6928b4313c85387?f=discussion
#include<iostream>
//1.找规律：
//思路：假设第一次跳一个台阶，那么还剩n-1个台阶，说明有f(n-1)个跳法。假设第一次跳两个台阶，那么还剩下n-2个台阶，有f(n-2)个跳法。
//假设第一次跳n-1个台阶，那么还剩一个台阶，跳法是f(1)。假设第一次调了n个台阶，那么剩下0个台阶，有1中跳法。
//总跳法：f(n)=1+f(n-1)+f(n-2)+f(n-3)+...+f(1)。（第一个1说明，第一次就跳了n阶，只有1中方法。）
//通过上述式子，可以得出：有1个台阶，总跳法(1)=1。有两个台阶时，总跳法f(2)=1+f(1)=2。有三个台阶时，总跳法f(3)=1+f(1)+f(2)=4。
//由此可以总结出规律，当有n个台阶时候，总跳法为f(n)=2*(n-1);

//另一种思想：
//每个台阶可以跳，也可以不跳，所以每个台阶都有两种方法。但是最后一个台阶必须跳，所以一共有2*（n-1）种方法。
class solution
{
public:
	int jumpFloorII(int number)
	{
		return 1 << (number - 1);
	}

//2.递归：
//思想：假设只有1个台阶，那么f(1)=1。假设有2个台阶，就会有两种方法，第一次跳1阶剩余2-1阶，f(2-1)个方法，第一次跳2阶剩余2-2阶，有f(2-2)个方法。f(2)=f(2-1)+f(2-2)
//以此类推，有n个台阶，就有n种方法，f(n)=f(n-1)+f(n-2)+f(n-3)+...+f(n-n)-> f(0) + f(1) + f(2) + f(3) + ... + f(n-1)
//所以f(n-1)=f(0) + f(1) + f(2) + f(3) + ... + f(n-2)。
//因为f(n)=f(0) + f(1) + f(2) + f(3) + ... + f(n-2)+f(n-1)。
//所以f(n)=2*f(n-1)。
	int jmpFloorII(int number)
	{
		if (number < 0)
			return 0;
		if (number == 1)
			return 1;
		return 2 * jmpFloorII(number - 1);
	}
};